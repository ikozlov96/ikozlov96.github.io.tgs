// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ngrok URL –∏–ª–∏ –¥–æ–º–µ–Ω
const CONFIG = {
    backendUrl: 'https://4d44-77-105-28-218.ngrok-free.app',
    testChatId: 123456,
    testPackId: 'sticker-pack-1',
    starsAmount: 100,
    tonAmount: 0.1
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
let tgWebApp = null;
let currentUser = null;

if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
    tgWebApp = Telegram.WebApp;
    tgWebApp.ready();
    tgWebApp.expand();

    currentUser = tgWebApp.initDataUnsafe?.user;

    if (currentUser) {
        logToUI(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${currentUser.first_name} (ID: ${currentUser.id})`);
        CONFIG.testChatId = currentUser.id;
    } else {
        logToUI('‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID');
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    document.body.style.backgroundColor = tgWebApp.backgroundColor || '#f0f0f0';
    document.body.style.color = tgWebApp.textColor || '#000000';

    logToUI(`üì± WebApp –≤–µ—Ä—Å–∏—è: ${tgWebApp.version}, –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: ${tgWebApp.platform}`);
} else {
    logToUI('‚ö†Ô∏è  Telegram WebApp API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ UI
function logToUI(message) {
    const debugLog = document.getElementById('debug-log');
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;

    console.log(logMessage);
    debugLog.textContent += `\n${logMessage}`;
    debugLog.scrollTop = debugLog.scrollHeight;
}

function setButtonState(buttonId, text, disabled = false) {
    const button = document.getElementById(buttonId);
    button.textContent = text;
    button.disabled = disabled;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(endpoint, data = null, method = 'POST') {
    const url = `${CONFIG.backendUrl}${endpoint}`;

    try {
        logToUI(`üì§ –ó–∞–ø—Ä–æ—Å: ${method} ${endpoint}`);
        if (data) logToUI(`üìù –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(data, null, 2)}`);

        const options = {
            method,
            headers: {
                'Content-Type': 'application/json',
                'ngrok-skip-browser-warning': 'true'
            },
            mode: 'cors'
        };

        if (data && method !== 'GET') {
            options.body = JSON.stringify(data);
        }

        const response = await fetch(url, options);
        const responseText = await response.text();

        logToUI(`üì• –û—Ç–≤–µ—Ç (${response.status}): ${responseText.substring(0, 200)}${responseText.length > 200 ? '...' : ''}`);

        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}\n${responseText}`);
        }

        return responseText ? JSON.parse(responseText) : {};

    } catch (error) {
        logToUI(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);

        if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
            logToUI('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: CORS, —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–µ–≤–µ—Ä–Ω—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (tgWebApp) {
            tgWebApp.showAlert(`–û—à–∏–±–∫–∞: ${error.message}`);
        } else {
            alert(`–û—à–∏–±–∫–∞: ${error.message}`);
        }

        throw error;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
async function checkServerStatus() {
    try {
        const status = await makeRequest('/api/status', null, 'GET');
        logToUI(`‚úÖ –°–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω: ${status.timestamp}`);
        logToUI(`üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: Stars=${status.features.telegram_stars}, TON=${status.features.ton_payments}`);

        if (!status.features.telegram_stars) {
            setButtonState('stars-btn', 'Telegram Stars –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ', true);
        }
        if (!status.features.ton_payments) {
            setButtonState('ton-btn', 'TON –ø–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', true);
        }

    } catch (error) {
        logToUI('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Telegram Stars –ø–ª–∞—Ç–µ–∂–µ–π
document.getElementById('stars-btn')?.addEventListener('click', async () => {
    setButtonState('stars-btn', '–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞...', true);

    try {
        // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Bot API
        const invoiceData = {
            chatId: CONFIG.testChatId,
            packId: CONFIG.testPackId,
            title: '‚≠ê –ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä-–ø–∞–∫',
            description: '–ù–∞–±–æ—Ä –∏–∑ 10 —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤',
            amount: CONFIG.starsAmount
        };

        const response = await makeRequest('/api/create-stars-invoice-link', invoiceData);

        if (!response.success || !response.invoiceLink) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        logToUI(`üí´ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–≤–æ–π—Å —Å–æ–∑–¥–∞–Ω–∞: ${response.invoiceLink}`);

        // –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Telegram WebApp API
        if (tgWebApp && typeof tgWebApp.openInvoice === 'function') {
            logToUI('üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ Telegram WebApp...');

            tgWebApp.openInvoice(response.invoiceLink, (status) => {
                logToUI(`üí≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${status}`);

                const messages = {
                    'paid': 'üéâ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω! –°—Ç–∏–∫–µ—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.',
                    'cancelled': '‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.',
                    'failed': 'üíî –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
                    'pending': '‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ...'
                };

                const message = messages[status] || `‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${status}`;

                if (tgWebApp) {
                    tgWebApp.showAlert(message);
                } else {
                    alert(message);
                }

                setButtonState('stars-btn', `‚≠ê Telegram Stars (${CONFIG.starsAmount} –∑–≤–µ–∑–¥)`, false);
            });
        } else {
            // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            logToUI('‚ö†Ô∏è  openInvoice API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞—é —Å—Å—ã–ª–∫—É');
            const link = document.createElement('a');
            link.href = response.invoiceLink;
            link.textContent = '–û—Ç–∫—Ä—ã—Ç—å Stars –∏–Ω–≤–æ–π—Å';
            link.target = '_blank';
            link.style.display = 'block';
            link.style.margin = '10px 0';
            link.style.color = '#0088cc';
            document.body.appendChild(link);

            setTimeout(() => {
                setButtonState('stars-btn', `‚≠ê Telegram Stars (${CONFIG.starsAmount} –∑–≤–µ–∑–¥)`, false);
            }, 2000);
        }

    } catch (error) {
        setButtonState('stars-btn', `‚≠ê Telegram Stars (${CONFIG.starsAmount} –∑–≤–µ–∑–¥)`, false);
        logToUI(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars –∏–Ω–≤–æ–π—Å–∞: ${error.message}`);
    }
});

// –£–õ–£–ß–®–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ TON –ø–ª–∞—Ç–µ–∂–µ–π
document.getElementById('ton-btn')?.addEventListener('click', async () => {
    setButtonState('ton-btn', '–°–æ–∑–¥–∞–Ω–∏–µ TON –ø–ª–∞—Ç–µ–∂–∞...', true);

    try {
        const paymentData = {
            chatId: CONFIG.testChatId,
            packId: CONFIG.testPackId,
            amount: CONFIG.tonAmount
        };

        const response = await makeRequest('/api/create-ton-invoice', paymentData);

        if (!response.success || !response.paymentLink) {
            throw new Error('–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        logToUI(`üíé TON –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ${response.payload}`);
        logToUI(`üîó –°—Å—ã–ª–∫–∞: ${response.paymentLink}`);

        // –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è TON –ø–ª–∞—Ç–µ–∂–∞
        const linkContainer = document.createElement('div');
        linkContainer.id = 'ton-payment-container';
        linkContainer.style.cssText = `
            margin: 15px 0;
            padding: 15px;
            background: #e3f2fd;
            border-radius: 8px;
            border-left: 4px solid #2196f3;
        `;

        linkContainer.innerHTML = `
            <p><strong>üíé TON –ü–ª–∞—Ç–µ–∂ (${CONFIG.tonAmount} TON)</strong></p>
            <p>üì± –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ TON –∫–æ—à–µ–ª—å–∫–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë:</p>
            <div style="word-break: break-all; margin: 10px 0; font-family: monospace; font-size: 12px; background: white; padding: 8px; border-radius: 4px;">
                ${response.paymentLink}
            </div>
            <div style="display: flex; gap: 10px; flex-wrap: wrap;">
                <button id="copy-ton-link" style="background: #4caf50; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
                </button>
                <button id="open-ton-wallet" style="background: #2196f3; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—å
                </button>
                <button id="close-ton-container" style="background: #f44336; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
                    ‚ùå –ó–∞–∫—Ä—ã—Ç—å
                </button>
            </div>
        `;

        document.body.appendChild(linkContainer);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('copy-ton-link').addEventListener('click', async () => {
            try {
                await navigator.clipboard.writeText(response.paymentLink);
                logToUI('üìã –°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');

                if (tgWebApp) {
                    tgWebApp.showAlert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞! –í—Å—Ç–∞–≤—å—Ç–µ –µ—ë –≤ TON –∫–æ—à–µ–ª–µ–∫.');
                } else {
                    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
                }
            } catch (error) {
                logToUI(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
                // Fallback
                const textArea = document.createElement('textarea');
                textArea.value = response.paymentLink;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!');
            }
        });

        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–æ—à–µ–ª–µ–∫
        document.getElementById('open-ton-wallet').addEventListener('click', () => {
            try {
                // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ—Ç–∫—Ä—ã—Ç–∏—è
                if (window.open(response.paymentLink, '_blank')) {
                    logToUI('‚úÖ –°—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ');
                } else {
                    logToUI('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
                    if (tgWebApp) {
                        tgWebApp.showAlert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é.');
                    }
                }
            } catch (error) {
                logToUI(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${error.message}`);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
        document.getElementById('close-ton-container').addEventListener('click', () => {
            linkContainer.remove();
            setButtonState('ton-btn', `üíé TON –ü–ª–∞—Ç–µ–∂–∏ (${CONFIG.tonAmount} TON)`, false);
        });

        // –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        let checkCount = 0;
        const maxChecks = 24;

        const paymentChecker = setInterval(async () => {
            checkCount++;

            try {
                const statusResponse = await makeRequest('/api/check-ton-payment', {
                    chatId: paymentData.chatId,
                    packId: paymentData.packId
                });

                logToUI(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞ #${checkCount}: ${statusResponse.status}`);

                if (statusResponse.status === 'completed') {
                    clearInterval(paymentChecker);
                    linkContainer.remove();
                    setButtonState('ton-btn', `üíé TON –ü–ª–∞—Ç–µ–∂–∏ (${CONFIG.tonAmount} TON)`, false);

                    const successMessage = 'üéâ TON –ø–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°—Ç–∏–∫–µ—Ä—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.';
                    logToUI(successMessage);

                    if (tgWebApp) {
                        tgWebApp.showAlert(successMessage);
                    } else {
                        alert(successMessage);
                    }
                } else if (statusResponse.status === 'not_found') {
                    clearInterval(paymentChecker);
                    linkContainer.remove();
                    setButtonState('ton-btn', `üíé TON –ü–ª–∞—Ç–µ–∂–∏ (${CONFIG.tonAmount} TON)`, false);
                    logToUI('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }

            } catch (error) {
                logToUI(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
            }

            if (checkCount >= maxChecks) {
                clearInterval(paymentChecker);
                logToUI(`‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${maxChecks} –ø–æ–ø—ã—Ç–æ–∫)`);
                setButtonState('ton-btn', `üíé TON –ü–ª–∞—Ç–µ–∂–∏ (${CONFIG.tonAmount} TON)`, false);
            }
        }, 5000);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const message = '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ—ë –≤ TON –∫–æ—à–µ–ª—å–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.';
        if (tgWebApp) {
            tgWebApp.showAlert(message);
        } else {
            alert(message);
        }

    } catch (error) {
        setButtonState('ton-btn', `üíé TON –ü–ª–∞—Ç–µ–∂–∏ (${CONFIG.tonAmount} TON)`, false);
        logToUI(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`);
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    logToUI('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    logToUI(`üîß Backend URL: ${CONFIG.backendUrl}`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    checkServerStatus();

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    setTimeout(() => {
        logToUI(`üí∞ –¢–µ—Å—Ç —Å—É–º–º—ã: ${CONFIG.starsAmount} Stars, ${CONFIG.tonAmount} TON`);
        logToUI(`üë§ Chat ID: ${CONFIG.testChatId}`);
    }, 1000);
});